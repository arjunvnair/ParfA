/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ParfA.jj */
/*@egen*/options{  JDK_VERSION = "1.8";  static = true;                                                                  }PARSER_BEGIN(ParfA)import java.util.Scanner;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.nio.file.Files;import java.util.jar.JarOutputStream;import java.util.jar.Manifest;import java.util.jar.Attributes;import java.util.Collection;import java.util.zip.ZipEntry;import org.apache.commons.io.FileUtils;	public class ParfA/*@bgen(jjtree)*/implements ParfATreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTParfAState jjtree = new JJTParfAState();

/*@egen*/    public static void main(String args[]) throws Exception    {      	Scanner s = new Scanner(System.in);      	System.out.print("Enter the file path to your ParfA code: ");      	String filename = s.nextLine();      	while(!(new File(filename)).exists())      	{      	  	System.out.print("File not recognized, double check your file path and enter again: ");      		filename = s.nextLine();     	}        try        {        	run(filename);        }        catch (TokenMgrError e)        {        	e.printStackTrace();            return;        }	}	/**	* Compiles and runs a text file with ParfA code	* @param filename the full name of the text file	* @throws FileNotFoundException if the file cannot be located	*/	public static void run(String filename) throws FileNotFoundException	{	  	try	  	{	  	  	ParfA parser = new ParfA(new FileInputStream(filename));        	parser.Program();        	parser.jjtree.rootNode().interpret();      	}        catch (ParseException e)        {        	System.err.println("Syntax error at " + "line:" + e.currentToken.endLine  + ", column:" + e.currentToken.endColumn + ".");            return;        }        catch (TokenMgrError e)        {        	System.err.println("Syntax error.");            return;        }        catch(ArrayIndexOutOfBoundsException e)        {          	System.err.println("Program ran out of random access memory and crashed (did you infinite loop?).");          	return;      	}        catch(IllegalStateException e)        {          	return;        }	}	/*	* Exports ParfA code into a binary file	* @param filename the full name of the text file	* @param exportFilename the destination of the binary file	* throws IOException if there is an I/O error		public static void export(String filename, String exportFilename) throws IOException	{	  	Manifest manifest = new Manifest();  		manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");	  	FileOutputStream fout = new FileOutputStream(filename);    	JarOutputStream jout = new JarOutputStream(fout, manifest);		Collection<File> files = FileUtils.listFiles(new File("bin"), null, true);		for(File f : files)		{			jout.putNextEntry(new ZipEntry(f.getName()));			jout.write(Files.readAllBytes(f.toPath()));			jout.closeEntry();		}		jout.close();		fout.close();	}	TODO	*/}PARSER_END(ParfA)SKIP :{  " "| "\t"| ";"| "\n"| "\r"}TOKEN: /* DEFINITIONS */{  < #LETTER: ["_","a"-"z","A"-"Z"] >| < #DIGIT: ["0"-"9"] >| < #INTEGER: ["1"-"9"] (["0"-"9"])* | <DIGIT> >| < #CHARACTER : ~["\""] >}TOKEN : /* KEYWORDS */{  < IF : "if" >| < ELSEIF : "else if" >| < ELSE : "else" >| < LOOP : "loop" >| < REPEATUNTIL : "repeatUntil" >| < FOREVER : "forever" >| < WAIT : "wait" >| < WAITUNTIL : "waitUntil" >| < ANNOUNCE : "announce" >| < ASK : "ask" >| < ANSWER : "answer" >| < CREATE : "create" >}TOKEN : /* TYPE KEYWORDS */{  < NUMBER : "number" >| < LOGIC : "logic" >| < TEXT : "text" >| < LIST : "list" >}TOKEN : /* SEPARATORS */{  < LPAR : "(" >| < RPAR : ")" >| < LBRAC : "{" >| < RBRAC : "}" >| < COMMA : "," >}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < MODULUS : "%" >| < EQUALS : "equals" | "==">| < NOTEQUAL : "doesnotequal" | "!=" >| < GREATERTHAN: ">"  >| < LESSTHAN: "<"  >| < GREATERTHANOREQUALTO: ">=" >| < LESSTHANOREQUALTO: "<=" >| < AND : "and" | "&" | "&&">| < OR : "or" | "|" | "||">| < NOT : "not" | "!" >| < NUMBEROF : "numberof" | "#" >| < CONTAINS : "contains" >| < LENGTHOF : "lengthof" | "length" >| < ASSIGN : "store" | "=" >| < ADD : "add" >| < REMOVE : "remove" >}TOKEN : /* LITERALS */{  < NUMBER_EXPRESSION : <INTEGER> | <INTEGER> "." <INTEGER> | <INTEGER> "." | "." <INTEGER> >| < TRUE : "true" >| < FALSE : "false" >| < TEXT_EXPRESSION : "\"" (<CHARACTER>)* "\"" >}TOKEN : /* IDENTIFIER */{  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >}MORE : /* COMMENTS */{  "/*" : START_LONG_COMMENT}SPECIAL_TOKEN :{  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>}<START_LONG_COMMENT>SPECIAL_TOKEN :{  <MULTI_LINE_COMMENT: "*/" > : DEFAULT}<START_LONG_COMMENT>MORE :{  < ~[] >}/* Program */void Program(): {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Program */
        try {
/*@egen*/	(Statement())+	<EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}/* Expressions */void Expression()      : {}{	LogicExpression()	}void LogicExpression()      : {}{	OrExpression()}void OrExpression()      : {}{	AndExpression() (LOOKAHEAD(2) <OR>/*@bgen(jjtree) #Or( 2) */
                                           {
                                             ASTOr jjtn001 = new ASTOr(JJTOR);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                             jjtn001.jjtSetFirstToken(getToken(1));
                                           }
                                           try {
/*@egen*/ AndExpression()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte001) {
                                             if (jjtc001) {
                                               jjtree.clearNodeScope(jjtn001);
                                               jjtc001 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte001 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte001;
                                             }
                                             if (jjte001 instanceof ParseException) {
                                               throw (ParseException)jjte001;
                                             }
                                             throw (Error)jjte001;
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtn001.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/       )*}void AndExpression()      : {}{	EqualityExpression() (LOOKAHEAD(2) <AND>/*@bgen(jjtree) #And( 2) */
                                                 {
                                                   ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
                                                   jjtn001.jjtSetFirstToken(getToken(1));
                                                 }
                                                 try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
                                                 } catch (Throwable jjte001) {
                                                   if (jjtc001) {
                                                     jjtree.clearNodeScope(jjtn001);
                                                     jjtc001 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte001 instanceof RuntimeException) {
                                                     throw (RuntimeException)jjte001;
                                                   }
                                                   if (jjte001 instanceof ParseException) {
                                                     throw (ParseException)jjte001;
                                                   }
                                                   throw (Error)jjte001;
                                                 } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtn001.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/        )*}void EqualityExpression()      : {}{	RelationalExpression() [LOOKAHEAD(2) ((<EQUALS>/*@bgen(jjtree) #Equals( 2) */
                                                        {
                                                          ASTEquals jjtn001 = new ASTEquals(JJTEQUALS);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                          jjtn001.jjtSetFirstToken(getToken(1));
                                                        }
                                                        try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte001) {
                                                          if (jjtc001) {
                                                            jjtree.clearNodeScope(jjtn001);
                                                            jjtc001 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte001 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte001;
                                                          }
                                                          if (jjte001 instanceof ParseException) {
                                                            throw (ParseException)jjte001;
                                                          }
                                                          throw (Error)jjte001;
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                            jjtn001.jjtSetLastToken(getToken(0));
                                                          }
                                                        }
/*@egen*/           ) | (<NOTEQUAL>/*@bgen(jjtree) #NotEquals( 2) */
                                                                                                         {
                                                                                                           ASTNotEquals jjtn002 = new ASTNotEquals(JJTNOTEQUALS);
                                                                                                           boolean jjtc002 = true;
                                                                                                           jjtree.openNodeScope(jjtn002);
                                                                                                           jjtn002.jjtSetFirstToken(getToken(1));
                                                                                                         }
                                                                                                         try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                                                                                                         } catch (Throwable jjte002) {
                                                                                                           if (jjtc002) {
                                                                                                             jjtree.clearNodeScope(jjtn002);
                                                                                                             jjtc002 = false;
                                                                                                           } else {
                                                                                                             jjtree.popNode();
                                                                                                           }
                                                                                                           if (jjte002 instanceof RuntimeException) {
                                                                                                             throw (RuntimeException)jjte002;
                                                                                                           }
                                                                                                           if (jjte002 instanceof ParseException) {
                                                                                                             throw (ParseException)jjte002;
                                                                                                           }
                                                                                                           throw (Error)jjte002;
                                                                                                         } finally {
                                                                                                           if (jjtc002) {
                                                                                                             jjtree.closeNodeScope(jjtn002,  2);
                                                                                                             jjtn002.jjtSetLastToken(getToken(0));
                                                                                                           }
                                                                                                         }
/*@egen*/              ))]}void RelationalExpression()      : {}{	MathExpression() [(<LESSTHAN>/*@bgen(jjtree) #LessThan( 2) */
                                      {
                                        ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                        jjtn001.jjtSetFirstToken(getToken(1));
                                      }
                                      try {
/*@egen*/ MathExpression()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte001;
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          throw (ParseException)jjte001;
                                        }
                                        throw (Error)jjte001;
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtn001.jjtSetLastToken(getToken(0));
                                        }
                                      }
/*@egen*/             ) | (<GREATERTHAN>/*@bgen(jjtree) #GreaterThan( 2) */
                                                                                      {
                                                                                        ASTGreaterThan jjtn002 = new ASTGreaterThan(JJTGREATERTHAN);
                                                                                        boolean jjtc002 = true;
                                                                                        jjtree.openNodeScope(jjtn002);
                                                                                        jjtn002.jjtSetFirstToken(getToken(1));
                                                                                      }
                                                                                      try {
/*@egen*/ MathExpression()/*@bgen(jjtree)*/
                                                                                      } catch (Throwable jjte002) {
                                                                                        if (jjtc002) {
                                                                                          jjtree.clearNodeScope(jjtn002);
                                                                                          jjtc002 = false;
                                                                                        } else {
                                                                                          jjtree.popNode();
                                                                                        }
                                                                                        if (jjte002 instanceof RuntimeException) {
                                                                                          throw (RuntimeException)jjte002;
                                                                                        }
                                                                                        if (jjte002 instanceof ParseException) {
                                                                                          throw (ParseException)jjte002;
                                                                                        }
                                                                                        throw (Error)jjte002;
                                                                                      } finally {
                                                                                        if (jjtc002) {
                                                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                                                          jjtn002.jjtSetLastToken(getToken(0));
                                                                                        }
                                                                                      }
/*@egen*/                ) | (<LESSTHANOREQUALTO>/*@bgen(jjtree) #LessThanOrEqualTo( 2) */
                                                                                                                                               {
                                                                                                                                                 ASTLessThanOrEqualTo jjtn003 = new ASTLessThanOrEqualTo(JJTLESSTHANOREQUALTO);
                                                                                                                                                 boolean jjtc003 = true;
                                                                                                                                                 jjtree.openNodeScope(jjtn003);
                                                                                                                                                 jjtn003.jjtSetFirstToken(getToken(1));
                                                                                                                                               }
                                                                                                                                               try {
/*@egen*/ MathExpression()/*@bgen(jjtree)*/
                                                                                                                                               } catch (Throwable jjte003) {
                                                                                                                                                 if (jjtc003) {
                                                                                                                                                   jjtree.clearNodeScope(jjtn003);
                                                                                                                                                   jjtc003 = false;
                                                                                                                                                 } else {
                                                                                                                                                   jjtree.popNode();
                                                                                                                                                 }
                                                                                                                                                 if (jjte003 instanceof RuntimeException) {
                                                                                                                                                   throw (RuntimeException)jjte003;
                                                                                                                                                 }
                                                                                                                                                 if (jjte003 instanceof ParseException) {
                                                                                                                                                   throw (ParseException)jjte003;
                                                                                                                                                 }
                                                                                                                                                 throw (Error)jjte003;
                                                                                                                                               } finally {
                                                                                                                                                 if (jjtc003) {
                                                                                                                                                   jjtree.closeNodeScope(jjtn003,  2);
                                                                                                                                                   jjtn003.jjtSetLastToken(getToken(0));
                                                                                                                                                 }
                                                                                                                                               }
/*@egen*/                      ) | (<GREATERTHANOREQUALTO>/*@bgen(jjtree) #GreaterThanOrEqualTo( 2) */
                                                                                                                                                                                                                 {
                                                                                                                                                                                                                   ASTGreaterThanOrEqualTo jjtn004 = new ASTGreaterThanOrEqualTo(JJTGREATERTHANOREQUALTO);
                                                                                                                                                                                                                   boolean jjtc004 = true;
                                                                                                                                                                                                                   jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                                   jjtn004.jjtSetFirstToken(getToken(1));
                                                                                                                                                                                                                 }
                                                                                                                                                                                                                 try {
/*@egen*/ MathExpression()/*@bgen(jjtree)*/
                                                                                                                                                                                                                 } catch (Throwable jjte004) {
                                                                                                                                                                                                                   if (jjtc004) {
                                                                                                                                                                                                                     jjtree.clearNodeScope(jjtn004);
                                                                                                                                                                                                                     jjtc004 = false;
                                                                                                                                                                                                                   } else {
                                                                                                                                                                                                                     jjtree.popNode();
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   if (jjte004 instanceof RuntimeException) {
                                                                                                                                                                                                                     throw (RuntimeException)jjte004;
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   if (jjte004 instanceof ParseException) {
                                                                                                                                                                                                                     throw (ParseException)jjte004;
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   throw (Error)jjte004;
                                                                                                                                                                                                                 } finally {
                                                                                                                                                                                                                   if (jjtc004) {
                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn004,  2);
                                                                                                                                                                                                                     jjtn004.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                 }
/*@egen*/                         )]}void MathExpression()      : {}{	AdditiveExpression()}void AdditiveExpression()      :{}{	MultiplicativeExpression() ((<PLUS>/*@bgen(jjtree) #Add( 2) */
                                            {
                                              ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                              jjtn001.jjtSetFirstToken(getToken(1));
                                            }
                                            try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte001) {
                                              if (jjtc001) {
                                                jjtree.clearNodeScope(jjtn001);
                                                jjtc001 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte001 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte001;
                                              }
                                              if (jjte001 instanceof ParseException) {
                                                throw (ParseException)jjte001;
                                              }
                                              throw (Error)jjte001;
                                            } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001,  2);
                                                jjtn001.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/        ) | (<MINUS>/*@bgen(jjtree) #Subtract( 2) */
                                                                                           {
                                                                                             ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
                                                                                             boolean jjtc002 = true;
                                                                                             jjtree.openNodeScope(jjtn002);
                                                                                             jjtn002.jjtSetFirstToken(getToken(1));
                                                                                           }
                                                                                           try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                                                                                           } catch (Throwable jjte002) {
                                                                                             if (jjtc002) {
                                                                                               jjtree.clearNodeScope(jjtn002);
                                                                                               jjtc002 = false;
                                                                                             } else {
                                                                                               jjtree.popNode();
                                                                                             }
                                                                                             if (jjte002 instanceof RuntimeException) {
                                                                                               throw (RuntimeException)jjte002;
                                                                                             }
                                                                                             if (jjte002 instanceof ParseException) {
                                                                                               throw (ParseException)jjte002;
                                                                                             }
                                                                                             throw (Error)jjte002;
                                                                                           } finally {
                                                                                             if (jjtc002) {
                                                                                               jjtree.closeNodeScope(jjtn002,  2);
                                                                                               jjtn002.jjtSetLastToken(getToken(0));
                                                                                             }
                                                                                           }
/*@egen*/             ))*}void MultiplicativeExpression()      : {}{  	NotExpression() ((<MULTIPLY>/*@bgen(jjtree) #Multiply( 2) */
                                     {
                                       ASTMultiply jjtn001 = new ASTMultiply(JJTMULTIPLY);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtn001.jjtSetFirstToken(getToken(1));
                                     }
                                     try {
/*@egen*/ NotExpression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtn001.jjtSetLastToken(getToken(0));
                                       }
                                     }
/*@egen*/             ) | (<DIVIDE>/*@bgen(jjtree) #Divide( 2) */
                                                                               {
                                                                                 ASTDivide jjtn002 = new ASTDivide(JJTDIVIDE);
                                                                                 boolean jjtc002 = true;
                                                                                 jjtree.openNodeScope(jjtn002);
                                                                                 jjtn002.jjtSetFirstToken(getToken(1));
                                                                               }
                                                                               try {
/*@egen*/ NotExpression()/*@bgen(jjtree)*/
                                                                               } catch (Throwable jjte002) {
                                                                                 if (jjtc002) {
                                                                                   jjtree.clearNodeScope(jjtn002);
                                                                                   jjtc002 = false;
                                                                                 } else {
                                                                                   jjtree.popNode();
                                                                                 }
                                                                                 if (jjte002 instanceof RuntimeException) {
                                                                                   throw (RuntimeException)jjte002;
                                                                                 }
                                                                                 if (jjte002 instanceof ParseException) {
                                                                                   throw (ParseException)jjte002;
                                                                                 }
                                                                                 throw (Error)jjte002;
                                                                               } finally {
                                                                                 if (jjtc002) {
                                                                                   jjtree.closeNodeScope(jjtn002,  2);
                                                                                   jjtn002.jjtSetLastToken(getToken(0));
                                                                                 }
                                                                               }
/*@egen*/           ) | (<MODULUS>/*@bgen(jjtree) #Modulus( 2) */
                                                                                                                        {
                                                                                                                          ASTModulus jjtn003 = new ASTModulus(JJTMODULUS);
                                                                                                                          boolean jjtc003 = true;
                                                                                                                          jjtree.openNodeScope(jjtn003);
                                                                                                                          jjtn003.jjtSetFirstToken(getToken(1));
                                                                                                                        }
                                                                                                                        try {
/*@egen*/ NotExpression()/*@bgen(jjtree)*/
                                                                                                                        } catch (Throwable jjte003) {
                                                                                                                          if (jjtc003) {
                                                                                                                            jjtree.clearNodeScope(jjtn003);
                                                                                                                            jjtc003 = false;
                                                                                                                          } else {
                                                                                                                            jjtree.popNode();
                                                                                                                          }
                                                                                                                          if (jjte003 instanceof RuntimeException) {
                                                                                                                            throw (RuntimeException)jjte003;
                                                                                                                          }
                                                                                                                          if (jjte003 instanceof ParseException) {
                                                                                                                            throw (ParseException)jjte003;
                                                                                                                          }
                                                                                                                          throw (Error)jjte003;
                                                                                                                        } finally {
                                                                                                                          if (jjtc003) {
                                                                                                                            jjtree.closeNodeScope(jjtn003,  2);
                                                                                                                            jjtn003.jjtSetLastToken(getToken(0));
                                                                                                                          }
                                                                                                                        }
/*@egen*/            ))*}void NotExpression()      : {}{	Value() | (<NOT>/*@bgen(jjtree) #Not( 2) */
                         {
                           ASTNot jjtn001 = new ASTNot(JJTNOT);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/ NotExpression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/        )}void Value()      : {}{	NumberLiteral() | LogicLiteral() | TextLiteral() | (<LENGTHOF>/*@bgen(jjtree) Length */
                                                                       {
                                                                         ASTLength jjtn001 = new ASTLength(JJTLENGTH);
                                                                         boolean jjtc001 = true;
                                                                         jjtree.openNodeScope(jjtn001);
                                                                         jjtn001.jjtSetFirstToken(getToken(1));
                                                                       }
                                                                       try {
/*@egen*/ (TextLiteral() | ListLiteral() | Id())/*@bgen(jjtree)*/
                                                                       } catch (Throwable jjte001) {
                                                                         if (jjtc001) {
                                                                           jjtree.clearNodeScope(jjtn001);
                                                                           jjtc001 = false;
                                                                         } else {
                                                                           jjtree.popNode();
                                                                         }
                                                                         if (jjte001 instanceof RuntimeException) {
                                                                           throw (RuntimeException)jjte001;
                                                                         }
                                                                         if (jjte001 instanceof ParseException) {
                                                                           throw (ParseException)jjte001;
                                                                         }
                                                                         throw (Error)jjte001;
                                                                       } finally {
                                                                         if (jjtc001) {
                                                                           jjtree.closeNodeScope(jjtn001, true);
                                                                           jjtn001.jjtSetLastToken(getToken(0));
                                                                         }
                                                                       }
/*@egen*/        ) | ((ListLiteral() | Id()) [(<CONTAINS>/*@bgen(jjtree) #Contains( 2) */
                                                                                                                                                              {
                                                                                                                                                                ASTContains jjtn002 = new ASTContains(JJTCONTAINS);
                                                                                                                                                                boolean jjtc002 = true;
                                                                                                                                                                jjtree.openNodeScope(jjtn002);
                                                                                                                                                                jjtn002.jjtSetFirstToken(getToken(1));
                                                                                                                                                              }
                                                                                                                                                              try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                                                                                                                                              } catch (Throwable jjte002) {
                                                                                                                                                                if (jjtc002) {
                                                                                                                                                                  jjtree.clearNodeScope(jjtn002);
                                                                                                                                                                  jjtc002 = false;
                                                                                                                                                                } else {
                                                                                                                                                                  jjtree.popNode();
                                                                                                                                                                }
                                                                                                                                                                if (jjte002 instanceof RuntimeException) {
                                                                                                                                                                  throw (RuntimeException)jjte002;
                                                                                                                                                                }
                                                                                                                                                                if (jjte002 instanceof ParseException) {
                                                                                                                                                                  throw (ParseException)jjte002;
                                                                                                                                                                }
                                                                                                                                                                throw (Error)jjte002;
                                                                                                                                                              } finally {
                                                                                                                                                                if (jjtc002) {
                                                                                                                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                                                                  jjtn002.jjtSetLastToken(getToken(0));
                                                                                                                                                                }
                                                                                                                                                              }
/*@egen*/             ) | (<NUMBEROF>/*@bgen(jjtree) #NumberOf( 2) */
                                                                                                                                                                                                       {
                                                                                                                                                                                                         ASTNumberOf jjtn003 = new ASTNumberOf(JJTNUMBEROF);
                                                                                                                                                                                                         boolean jjtc003 = true;
                                                                                                                                                                                                         jjtree.openNodeScope(jjtn003);
                                                                                                                                                                                                         jjtn003.jjtSetFirstToken(getToken(1));
                                                                                                                                                                                                       }
                                                                                                                                                                                                       try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                                                                                                                                                                                       } catch (Throwable jjte003) {
                                                                                                                                                                                                         if (jjtc003) {
                                                                                                                                                                                                           jjtree.clearNodeScope(jjtn003);
                                                                                                                                                                                                           jjtc003 = false;
                                                                                                                                                                                                         } else {
                                                                                                                                                                                                           jjtree.popNode();
                                                                                                                                                                                                         }
                                                                                                                                                                                                         if (jjte003 instanceof RuntimeException) {
                                                                                                                                                                                                           throw (RuntimeException)jjte003;
                                                                                                                                                                                                         }
                                                                                                                                                                                                         if (jjte003 instanceof ParseException) {
                                                                                                                                                                                                           throw (ParseException)jjte003;
                                                                                                                                                                                                         }
                                                                                                                                                                                                         throw (Error)jjte003;
                                                                                                                                                                                                       } finally {
                                                                                                                                                                                                         if (jjtc003) {
                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn003,  2);
                                                                                                                                                                                                           jjtn003.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                         }
                                                                                                                                                                                                       }
/*@egen*/             )]) | Answer() | (<LPAR> Expression() <RPAR>)}void NumberLiteral():{/*@bgen(jjtree) NumberLiteral */
   ASTNumberLiteral jjtn000 = new ASTNumberLiteral(JJTNUMBERLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/   Token t;}{/*@bgen(jjtree) NumberLiteral */
        try {
/*@egen*/ 	t = <NUMBER_EXPRESSION>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                }
/*@egen*/ {jjtn000.val = Double.parseDouble(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void LogicLiteral(): {/*@bgen(jjtree) LogicLiteral */
  ASTLogicLiteral jjtn000 = new ASTLogicLiteral(JJTLOGICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) LogicLiteral */
        try {
/*@egen*/	<TRUE>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {jjtn000.val = true;} | <FALSE>/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
/*@egen*/ {jjtn000.val = false;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void TextLiteral():{/*@bgen(jjtree) TextLiteral */
        ASTTextLiteral jjtn000 = new ASTTextLiteral(JJTTEXTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/	Token t;}{/*@bgen(jjtree) TextLiteral */
        try {
/*@egen*/	t = <TEXT_EXPRESSION>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ {jjtn000.val = new String(t.image.substring(1, t.image.length() - 1));}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void ListLiteral():{/*@bgen(jjtree) ListLiteral */
  ASTListLiteral jjtn000 = new ASTListLiteral(JJTLISTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) ListLiteral */
        try {
/*@egen*/  	<LBRAC> Expression() (<COMMA> Expression())* <RBRAC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void Id():{/*@bgen(jjtree) Id */
        ASTId jjtn000 = new ASTId(JJTID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/	Token t;}{/*@bgen(jjtree) Id */
        try {
/*@egen*/	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                         }
/*@egen*/ {jjtn000.name = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void Answer(): {/*@bgen(jjtree) Answer */
  ASTAnswer jjtn000 = new ASTAnswer(JJTANSWER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Answer */
        try {
/*@egen*/	<ANSWER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}/* STATEMENTS */void IfStatement():{/*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/  	jjtn000.elseIfCount = 0;}{/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/  	<IF> <LPAR> LogicExpression() <RPAR>    Block()	(<ELSEIF> <LPAR> LogicExpression() <RPAR>    Block() {jjtn000.elseIfCount++;})*	[<ELSE>    Block()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ }void LoopStatement():{/*@bgen(jjtree) LoopStatement */
  ASTLoopStatement jjtn000 = new ASTLoopStatement(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) LoopStatement */
    try {
/*@egen*/    <LOOP> <LPAR> MathExpression() <RPAR>    Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/}void RepeatUntilStatement(): {/*@bgen(jjtree) RepeatUntilStatement */
  ASTRepeatUntilStatement jjtn000 = new ASTRepeatUntilStatement(JJTREPEATUNTILSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) RepeatUntilStatement */
        try {
/*@egen*/	<REPEATUNTIL> <LPAR> LogicExpression() <RPAR>	Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void ForeverStatement():{/*@bgen(jjtree) ForeverStatement */
  ASTForeverStatement jjtn000 = new ASTForeverStatement(JJTFOREVERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) ForeverStatement */
    try {
/*@egen*/    <FOREVER>    Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/}void WaitStatement():{/*@bgen(jjtree) WaitStatement */
  ASTWaitStatement jjtn000 = new ASTWaitStatement(JJTWAITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) WaitStatement */
        try {
/*@egen*/	<WAIT> <LPAR> MathExpression() <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void WaitUntilStatement():{/*@bgen(jjtree) WaitUntilStatement */
  ASTWaitUntilStatement jjtn000 = new ASTWaitUntilStatement(JJTWAITUNTILSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) WaitUntilStatement */
        try {
/*@egen*/               	<WAIT> <LPAR> LogicExpression() <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void AnnounceStatement(): {/*@bgen(jjtree) AnnounceStatement */
  ASTAnnounceStatement jjtn000 = new ASTAnnounceStatement(JJTANNOUNCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) AnnounceStatement */
        try {
/*@egen*/	<ANNOUNCE> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void AskStatement(): {/*@bgen(jjtree) AskStatement */
  ASTAskStatement jjtn000 = new ASTAskStatement(JJTASKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) AskStatement */
        try {
/*@egen*/	<ASK> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void ListAddStatement(): {/*@bgen(jjtree) ListAddStatement */
  ASTListAddStatement jjtn000 = new ASTListAddStatement(JJTLISTADDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) ListAddStatement */
        try {
/*@egen*/  	Id() <ADD> Expression() (<COMMA> Expression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void ListRemoveStatement(): {/*@bgen(jjtree) ListRemoveStatement */
  ASTListRemoveStatement jjtn000 = new ASTListRemoveStatement(JJTLISTREMOVESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) ListRemoveStatement */
        try {
/*@egen*/	Id() <REMOVE> Expression() (<COMMA> Expression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void VariableDeclareStatement():{/*@bgen(jjtree) VariableDeclareStatement */
        ASTVariableDeclareStatement jjtn000 = new ASTVariableDeclareStatement(JJTVARIABLEDECLARESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/	Token t;}{/*@bgen(jjtree) VariableDeclareStatement */
        try {
/*@egen*/	<CREATE> (<NUMBER> {jjtn000.type = ParfAConstants.NUMBER;} | <LOGIC> {jjtn000.type = ParfAConstants.LOGIC;} | <TEXT> {jjtn000.type = ParfAConstants.TEXT;} | <LIST> {jjtn000.type = ParfAConstants.LIST;}) t = <IDENTIFIER>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                       jjtc000 = false;
                                                                                                                                                                                                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                                     }
/*@egen*/  {jjtn000.name = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ }void VariableAssignStatement(): {/*@bgen(jjtree) VariableAssignStatement */
  ASTVariableAssignStatement jjtn000 = new ASTVariableAssignStatement(JJTVARIABLEASSIGNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) VariableAssignStatement */
         try {
/*@egen*/	 Id() <ASSIGN> Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/}void VariableDeclareAssignStatement():{/*@bgen(jjtree) VariableDeclareAssignStatement */
        ASTVariableDeclareAssignStatement jjtn000 = new ASTVariableDeclareAssignStatement(JJTVARIABLEDECLAREASSIGNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/  	Token t;}{/*@bgen(jjtree) VariableDeclareAssignStatement */
         try {
/*@egen*/	 <CREATE> (<NUMBER> {jjtn000.type = ParfAConstants.NUMBER;} | <LOGIC> {jjtn000.type = ParfAConstants.LOGIC;} | <TEXT> {jjtn000.type = ParfAConstants.TEXT;} | <LIST> {jjtn000.type = ParfAConstants.LIST;})  t = <IDENTIFIER>  {jjtn000.name = t.image;} <ASSIGN> Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/} void Block(): {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) Block */
        try {
/*@egen*/	<LBRAC>    	(Statement())*    <RBRAC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/}void Statement()      : {}{  LOOKAHEAD(VariableDeclareAssignStatement()) VariableDeclareAssignStatement()| LOOKAHEAD(2) VariableAssignStatement()| LOOKAHEAD(3) VariableDeclareStatement()| LOOKAHEAD(2) ListAddStatement()| ListRemoveStatement()| IfStatement()| LoopStatement()| RepeatUntilStatement()| ForeverStatement()| LOOKAHEAD(3) WaitStatement()| WaitUntilStatement()| LOOKAHEAD(2) AnnounceStatement()| AskStatement()}