/* Generated By:JJTree&JavaCC: Do not edit this line. ParfAConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParfAConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LETTER = 6;
  /** RegularExpression Id. */
  int DIGIT = 7;
  /** RegularExpression Id. */
  int INTEGER = 8;
  /** RegularExpression Id. */
  int CHARACTER = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int ELSEIF = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int LOOP = 13;
  /** RegularExpression Id. */
  int REPEATUNTIL = 14;
  /** RegularExpression Id. */
  int FOREVER = 15;
  /** RegularExpression Id. */
  int WAIT = 16;
  /** RegularExpression Id. */
  int WAITUNTIL = 17;
  /** RegularExpression Id. */
  int ANNOUNCE = 18;
  /** RegularExpression Id. */
  int ASK = 19;
  /** RegularExpression Id. */
  int ANSWER = 20;
  /** RegularExpression Id. */
  int CREATE = 21;
  /** RegularExpression Id. */
  int NUMBER = 22;
  /** RegularExpression Id. */
  int LOGIC = 23;
  /** RegularExpression Id. */
  int STRING = 24;
  /** RegularExpression Id. */
  int LIST = 25;
  /** RegularExpression Id. */
  int LPAR = 26;
  /** RegularExpression Id. */
  int RPAR = 27;
  /** RegularExpression Id. */
  int LBRAC = 28;
  /** RegularExpression Id. */
  int RBRAC = 29;
  /** RegularExpression Id. */
  int COMMA = 30;
  /** RegularExpression Id. */
  int PLUS = 31;
  /** RegularExpression Id. */
  int MINUS = 32;
  /** RegularExpression Id. */
  int MULTIPLY = 33;
  /** RegularExpression Id. */
  int DIVIDE = 34;
  /** RegularExpression Id. */
  int MODULUS = 35;
  /** RegularExpression Id. */
  int EQUALS = 36;
  /** RegularExpression Id. */
  int NOTEQUAL = 37;
  /** RegularExpression Id. */
  int GREATERTHAN = 38;
  /** RegularExpression Id. */
  int LESSTHAN = 39;
  /** RegularExpression Id. */
  int GREATERTHANOREQUALTO = 40;
  /** RegularExpression Id. */
  int LESSTHANOREQUALTO = 41;
  /** RegularExpression Id. */
  int AND = 42;
  /** RegularExpression Id. */
  int OR = 43;
  /** RegularExpression Id. */
  int NOT = 44;
  /** RegularExpression Id. */
  int NUMBEROF = 45;
  /** RegularExpression Id. */
  int CONTAINS = 46;
  /** RegularExpression Id. */
  int ASSIGN = 47;
  /** RegularExpression Id. */
  int ADD = 48;
  /** RegularExpression Id. */
  int REMOVE = 49;
  /** RegularExpression Id. */
  int NUMBER_EXPRESSION = 50;
  /** RegularExpression Id. */
  int TRUE = 51;
  /** RegularExpression Id. */
  int FALSE = 52;
  /** RegularExpression Id. */
  int STRING_EXPRESSION = 53;
  /** RegularExpression Id. */
  int IDENTIFIER = 54;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 56;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 57;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int START_LONG_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\";\"",
    "\"\\n\"",
    "\"\\r\"",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER>",
    "<CHARACTER>",
    "\"if\"",
    "\"else if\"",
    "\"else\"",
    "\"loop\"",
    "\"repeatUntil\"",
    "\"forever\"",
    "\"wait\"",
    "\"waitUntil\"",
    "\"announce\"",
    "\"ask\"",
    "\"answer\"",
    "\"create\"",
    "\"number\"",
    "\"logic\"",
    "\"string\"",
    "\"list\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "<EQUALS>",
    "<NOTEQUAL>",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "<AND>",
    "<OR>",
    "<NOT>",
    "<NUMBEROF>",
    "\"contains\"",
    "<ASSIGN>",
    "\"add\"",
    "\"remove\"",
    "<NUMBER_EXPRESSION>",
    "\"true\"",
    "\"false\"",
    "<STRING_EXPRESSION>",
    "<IDENTIFIER>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 58>",
  };

}
