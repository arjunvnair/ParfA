/* Generated By:JJTree&JavaCC: Do not edit this line. ParfA.java */
import java.util.Scanner;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.util.jar.JarOutputStream;
import java.util.jar.Manifest;
import java.util.jar.Attributes;
import java.util.Collection;
import java.util.zip.ZipEntry;

import org.apache.commons.io.FileUtils;

public class ParfA/*@bgen(jjtree)*/implements ParfATreeConstants, ParfAConstants {/*@bgen(jjtree)*/
  protected JJTParfAState jjtree = new JJTParfAState();public static void main(String args[]) throws Exception
    {
        Scanner s = new Scanner(System.in);
        String answer = "y";
        while(answer.equalsIgnoreCase("y"))
        {
                try
                {
                        Files.createDirectory(Paths.get(System.getProperty("user.home") + "/Documents/ParfA"));
                        }
                        catch(IOException e) {}
                System.out.print("Enter the file name of the txt file (must be in the Documents/ParfA folder): ");
                String filename = s.nextLine();
                while(!(new File(System.getProperty("user.home") + "/Documents/ParfA/" + filename)).exists())
                {
                        System.out.print("File not recognized, double check your file path and enter again: ");
                        filename = s.nextLine();
                }
                try
                {
                        run(System.getProperty("user.home") + "/Documents/ParfA/" + filename);
                }
                catch (TokenMgrError e)
                {
                        e.printStackTrace();
                return;
                }
                System.out.print("Program finished. Run another program (y/n)? ");
                answer = s.nextLine();
         }
        }
        /**	* Compiles and runs a text file with ParfA code	* @param filename the full name of the text file	* @throws FileNotFoundException if the file cannot be located	*/
        public static void run(String filename) throws FileNotFoundException
        {
                try
                {
                        ParfA parser = new ParfA(new FileInputStream(filename));
                parser.Program();
                parser.jjtree.rootNode().interpret();
        }
        catch (ParseException e)
        {
                System.err.println("Syntax error at " + "line:" + e.currentToken.endLine  + ", column:" + e.currentToken.endColumn + ".");
            return;
        }
        catch (TokenMgrError e)
        {
                System.err.println("Syntax error.");
            return;
        }
        catch(ArrayIndexOutOfBoundsException e)
        {
                System.err.println("Program ran out of random access memory and crashed (did you infinite loop?).");
                return;
        }
        catch(IllegalStateException e)
        {
                return;
        }
        }

/* Program */
  final public void Program() throws ParseException {
                 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        Statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case LOOP:
        case REPEATUNTIL:
        case FOREVER:
        case WAIT:
        case ANNOUNCE:
        case ASK:
        case CREATE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/* Expressions */
  final public void Expression() throws ParseException {
    LogicExpression();
  }

  final public void LogicExpression() throws ParseException {
    OrExpression();
  }

  final public void OrExpression() throws ParseException {
    AndExpression();
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(OR);
                                             ASTOr jjtn001 = new ASTOr(JJTOR);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                             jjtn001.jjtSetFirstToken(getToken(1));
      try {
        AndExpression();
      } catch (Throwable jjte001) {
                                             if (jjtc001) {
                                               jjtree.clearNodeScope(jjtn001);
                                               jjtc001 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte001 instanceof RuntimeException) {
                                               {if (true) throw (RuntimeException)jjte001;}
                                             }
                                             if (jjte001 instanceof ParseException) {
                                               {if (true) throw (ParseException)jjte001;}
                                             }
                                             {if (true) throw (Error)jjte001;}
      } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtn001.jjtSetLastToken(getToken(0));
                                             }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(AND);
                                                   ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
                                                   jjtn001.jjtSetFirstToken(getToken(1));
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
                                                   if (jjtc001) {
                                                     jjtree.clearNodeScope(jjtn001);
                                                     jjtc001 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte001 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte001;}
                                                   }
                                                   if (jjte001 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte001;}
                                                   }
                                                   {if (true) throw (Error)jjte001;}
      } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtn001.jjtSetLastToken(getToken(0));
                                                   }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    if (jj_2_3(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
                                                          ASTEquals jjtn001 = new ASTEquals(JJTEQUALS);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          RelationalExpression();
        } catch (Throwable jjte001) {
                                                          if (jjtc001) {
                                                            jjtree.clearNodeScope(jjtn001);
                                                            jjtc001 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte001 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte001;}
                                                          }
                                                          if (jjte001 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte001;}
                                                          }
                                                          {if (true) throw (Error)jjte001;}
        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                            jjtn001.jjtSetLastToken(getToken(0));
                                                          }
        }
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
                                                                                                           ASTNotEquals jjtn002 = new ASTNotEquals(JJTNOTEQUALS);
                                                                                                           boolean jjtc002 = true;
                                                                                                           jjtree.openNodeScope(jjtn002);
                                                                                                           jjtn002.jjtSetFirstToken(getToken(1));
        try {
          RelationalExpression();
        } catch (Throwable jjte002) {
                                                                                                           if (jjtc002) {
                                                                                                             jjtree.clearNodeScope(jjtn002);
                                                                                                             jjtc002 = false;
                                                                                                           } else {
                                                                                                             jjtree.popNode();
                                                                                                           }
                                                                                                           if (jjte002 instanceof RuntimeException) {
                                                                                                             {if (true) throw (RuntimeException)jjte002;}
                                                                                                           }
                                                                                                           if (jjte002 instanceof ParseException) {
                                                                                                             {if (true) throw (ParseException)jjte002;}
                                                                                                           }
                                                                                                           {if (true) throw (Error)jjte002;}
        } finally {
                                                                                                           if (jjtc002) {
                                                                                                             jjtree.closeNodeScope(jjtn002,  2);
                                                                                                             jjtn002.jjtSetLastToken(getToken(0));
                                                                                                           }
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    MathExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATERTHAN:
    case LESSTHAN:
    case GREATERTHANOREQUALTO:
    case LESSTHANOREQUALTO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
                                        ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                        jjtn001.jjtSetFirstToken(getToken(1));
        try {
          MathExpression();
        } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte001;}
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte001;}
                                        }
                                        {if (true) throw (Error)jjte001;}
        } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                          jjtn001.jjtSetLastToken(getToken(0));
                                        }
        }
        break;
      case GREATERTHAN:
        jj_consume_token(GREATERTHAN);
                                                                                        ASTGreaterThan jjtn002 = new ASTGreaterThan(JJTGREATERTHAN);
                                                                                        boolean jjtc002 = true;
                                                                                        jjtree.openNodeScope(jjtn002);
                                                                                        jjtn002.jjtSetFirstToken(getToken(1));
        try {
          MathExpression();
        } catch (Throwable jjte002) {
                                                                                        if (jjtc002) {
                                                                                          jjtree.clearNodeScope(jjtn002);
                                                                                          jjtc002 = false;
                                                                                        } else {
                                                                                          jjtree.popNode();
                                                                                        }
                                                                                        if (jjte002 instanceof RuntimeException) {
                                                                                          {if (true) throw (RuntimeException)jjte002;}
                                                                                        }
                                                                                        if (jjte002 instanceof ParseException) {
                                                                                          {if (true) throw (ParseException)jjte002;}
                                                                                        }
                                                                                        {if (true) throw (Error)jjte002;}
        } finally {
                                                                                        if (jjtc002) {
                                                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                                                          jjtn002.jjtSetLastToken(getToken(0));
                                                                                        }
        }
        break;
      case LESSTHANOREQUALTO:
        jj_consume_token(LESSTHANOREQUALTO);
                                                                                                                                                 ASTLessThanOrEqualTo jjtn003 = new ASTLessThanOrEqualTo(JJTLESSTHANOREQUALTO);
                                                                                                                                                 boolean jjtc003 = true;
                                                                                                                                                 jjtree.openNodeScope(jjtn003);
                                                                                                                                                 jjtn003.jjtSetFirstToken(getToken(1));
        try {
          MathExpression();
        } catch (Throwable jjte003) {
                                                                                                                                                 if (jjtc003) {
                                                                                                                                                   jjtree.clearNodeScope(jjtn003);
                                                                                                                                                   jjtc003 = false;
                                                                                                                                                 } else {
                                                                                                                                                   jjtree.popNode();
                                                                                                                                                 }
                                                                                                                                                 if (jjte003 instanceof RuntimeException) {
                                                                                                                                                   {if (true) throw (RuntimeException)jjte003;}
                                                                                                                                                 }
                                                                                                                                                 if (jjte003 instanceof ParseException) {
                                                                                                                                                   {if (true) throw (ParseException)jjte003;}
                                                                                                                                                 }
                                                                                                                                                 {if (true) throw (Error)jjte003;}
        } finally {
                                                                                                                                                 if (jjtc003) {
                                                                                                                                                   jjtree.closeNodeScope(jjtn003,  2);
                                                                                                                                                   jjtn003.jjtSetLastToken(getToken(0));
                                                                                                                                                 }
        }
        break;
      case GREATERTHANOREQUALTO:
        jj_consume_token(GREATERTHANOREQUALTO);
                                                                                                                                                                                                                   ASTGreaterThanOrEqualTo jjtn004 = new ASTGreaterThanOrEqualTo(JJTGREATERTHANOREQUALTO);
                                                                                                                                                                                                                   boolean jjtc004 = true;
                                                                                                                                                                                                                   jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                                   jjtn004.jjtSetFirstToken(getToken(1));
        try {
          MathExpression();
        } catch (Throwable jjte004) {
                                                                                                                                                                                                                   if (jjtc004) {
                                                                                                                                                                                                                     jjtree.clearNodeScope(jjtn004);
                                                                                                                                                                                                                     jjtc004 = false;
                                                                                                                                                                                                                   } else {
                                                                                                                                                                                                                     jjtree.popNode();
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   if (jjte004 instanceof RuntimeException) {
                                                                                                                                                                                                                     {if (true) throw (RuntimeException)jjte004;}
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   if (jjte004 instanceof ParseException) {
                                                                                                                                                                                                                     {if (true) throw (ParseException)jjte004;}
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   {if (true) throw (Error)jjte004;}
        } finally {
                                                                                                                                                                                                                   if (jjtc004) {
                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn004,  2);
                                                                                                                                                                                                                     jjtn004.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                   }
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void MathExpression() throws ParseException {
    AdditiveExpression();
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                                              ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                              jjtn001.jjtSetFirstToken(getToken(1));
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
                                              if (jjtc001) {
                                                jjtree.clearNodeScope(jjtn001);
                                                jjtc001 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte001 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte001;}
                                              }
                                              if (jjte001 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte001;}
                                              }
                                              {if (true) throw (Error)jjte001;}
        } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001,  2);
                                                jjtn001.jjtSetLastToken(getToken(0));
                                              }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                                                             ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
                                                                                             boolean jjtc002 = true;
                                                                                             jjtree.openNodeScope(jjtn002);
                                                                                             jjtn002.jjtSetFirstToken(getToken(1));
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
                                                                                             if (jjtc002) {
                                                                                               jjtree.clearNodeScope(jjtn002);
                                                                                               jjtc002 = false;
                                                                                             } else {
                                                                                               jjtree.popNode();
                                                                                             }
                                                                                             if (jjte002 instanceof RuntimeException) {
                                                                                               {if (true) throw (RuntimeException)jjte002;}
                                                                                             }
                                                                                             if (jjte002 instanceof ParseException) {
                                                                                               {if (true) throw (ParseException)jjte002;}
                                                                                             }
                                                                                             {if (true) throw (Error)jjte002;}
        } finally {
                                                                                             if (jjtc002) {
                                                                                               jjtree.closeNodeScope(jjtn002,  2);
                                                                                               jjtn002.jjtSetLastToken(getToken(0));
                                                                                             }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    NotExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MODULUS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
                                       ASTMultiply jjtn001 = new ASTMultiply(JJTMULTIPLY);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtn001.jjtSetFirstToken(getToken(1));
        try {
          NotExpression();
        } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtn001.jjtSetLastToken(getToken(0));
                                       }
        }
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
                                                                                 ASTDivide jjtn002 = new ASTDivide(JJTDIVIDE);
                                                                                 boolean jjtc002 = true;
                                                                                 jjtree.openNodeScope(jjtn002);
                                                                                 jjtn002.jjtSetFirstToken(getToken(1));
        try {
          NotExpression();
        } catch (Throwable jjte002) {
                                                                                 if (jjtc002) {
                                                                                   jjtree.clearNodeScope(jjtn002);
                                                                                   jjtc002 = false;
                                                                                 } else {
                                                                                   jjtree.popNode();
                                                                                 }
                                                                                 if (jjte002 instanceof RuntimeException) {
                                                                                   {if (true) throw (RuntimeException)jjte002;}
                                                                                 }
                                                                                 if (jjte002 instanceof ParseException) {
                                                                                   {if (true) throw (ParseException)jjte002;}
                                                                                 }
                                                                                 {if (true) throw (Error)jjte002;}
        } finally {
                                                                                 if (jjtc002) {
                                                                                   jjtree.closeNodeScope(jjtn002,  2);
                                                                                   jjtn002.jjtSetLastToken(getToken(0));
                                                                                 }
        }
        break;
      case MODULUS:
        jj_consume_token(MODULUS);
                                                                                                                          ASTModulus jjtn003 = new ASTModulus(JJTMODULUS);
                                                                                                                          boolean jjtc003 = true;
                                                                                                                          jjtree.openNodeScope(jjtn003);
                                                                                                                          jjtn003.jjtSetFirstToken(getToken(1));
        try {
          NotExpression();
        } catch (Throwable jjte003) {
                                                                                                                          if (jjtc003) {
                                                                                                                            jjtree.clearNodeScope(jjtn003);
                                                                                                                            jjtc003 = false;
                                                                                                                          } else {
                                                                                                                            jjtree.popNode();
                                                                                                                          }
                                                                                                                          if (jjte003 instanceof RuntimeException) {
                                                                                                                            {if (true) throw (RuntimeException)jjte003;}
                                                                                                                          }
                                                                                                                          if (jjte003 instanceof ParseException) {
                                                                                                                            {if (true) throw (ParseException)jjte003;}
                                                                                                                          }
                                                                                                                          {if (true) throw (Error)jjte003;}
        } finally {
                                                                                                                          if (jjtc003) {
                                                                                                                            jjtree.closeNodeScope(jjtn003,  2);
                                                                                                                            jjtn003.jjtSetLastToken(getToken(0));
                                                                                                                          }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NotExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANSWER:
    case LPAR:
    case LBRAC:
    case LENGTHOF:
    case NUMBER_EXPRESSION:
    case TRUE:
    case FALSE:
    case TEXT_EXPRESSION:
    case IDENTIFIER:
      Value();
      break;
    case NOT:
      jj_consume_token(NOT);
                           ASTNot jjtn001 = new ASTNot(JJTNOT);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        NotExpression();
      } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER_EXPRESSION:
      NumberLiteral();
      break;
    case TRUE:
    case FALSE:
      LogicLiteral();
      break;
    case TEXT_EXPRESSION:
      TextLiteral();
      break;
    case LENGTHOF:
      jj_consume_token(LENGTHOF);
                                                                         ASTLength jjtn001 = new ASTLength(JJTLENGTH);
                                                                         boolean jjtc001 = true;
                                                                         jjtree.openNodeScope(jjtn001);
                                                                         jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT_EXPRESSION:
          TextLiteral();
          break;
        case LBRAC:
          ListLiteral();
          break;
        case IDENTIFIER:
          Id();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
                                                                         if (jjtc001) {
                                                                           jjtree.clearNodeScope(jjtn001);
                                                                           jjtc001 = false;
                                                                         } else {
                                                                           jjtree.popNode();
                                                                         }
                                                                         if (jjte001 instanceof RuntimeException) {
                                                                           {if (true) throw (RuntimeException)jjte001;}
                                                                         }
                                                                         if (jjte001 instanceof ParseException) {
                                                                           {if (true) throw (ParseException)jjte001;}
                                                                         }
                                                                         {if (true) throw (Error)jjte001;}
      } finally {
                                                                         if (jjtc001) {
                                                                           jjtree.closeNodeScope(jjtn001, true);
                                                                           jjtn001.jjtSetLastToken(getToken(0));
                                                                         }
      }
      break;
    case LBRAC:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRAC:
        ListLiteral();
        break;
      case IDENTIFIER:
        Id();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBEROF:
      case CONTAINS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINS:
          jj_consume_token(CONTAINS);
                                                                                                                                                                ASTContains jjtn002 = new ASTContains(JJTCONTAINS);
                                                                                                                                                                boolean jjtc002 = true;
                                                                                                                                                                jjtree.openNodeScope(jjtn002);
                                                                                                                                                                jjtn002.jjtSetFirstToken(getToken(1));
          try {
            Expression();
          } catch (Throwable jjte002) {
                                                                                                                                                                if (jjtc002) {
                                                                                                                                                                  jjtree.clearNodeScope(jjtn002);
                                                                                                                                                                  jjtc002 = false;
                                                                                                                                                                } else {
                                                                                                                                                                  jjtree.popNode();
                                                                                                                                                                }
                                                                                                                                                                if (jjte002 instanceof RuntimeException) {
                                                                                                                                                                  {if (true) throw (RuntimeException)jjte002;}
                                                                                                                                                                }
                                                                                                                                                                if (jjte002 instanceof ParseException) {
                                                                                                                                                                  {if (true) throw (ParseException)jjte002;}
                                                                                                                                                                }
                                                                                                                                                                {if (true) throw (Error)jjte002;}
          } finally {
                                                                                                                                                                if (jjtc002) {
                                                                                                                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                                                                  jjtn002.jjtSetLastToken(getToken(0));
                                                                                                                                                                }
          }
          break;
        case NUMBEROF:
          jj_consume_token(NUMBEROF);
                                                                                                                                                                                                         ASTNumberOf jjtn003 = new ASTNumberOf(JJTNUMBEROF);
                                                                                                                                                                                                         boolean jjtc003 = true;
                                                                                                                                                                                                         jjtree.openNodeScope(jjtn003);
                                                                                                                                                                                                         jjtn003.jjtSetFirstToken(getToken(1));
          try {
            Expression();
          } catch (Throwable jjte003) {
                                                                                                                                                                                                         if (jjtc003) {
                                                                                                                                                                                                           jjtree.clearNodeScope(jjtn003);
                                                                                                                                                                                                           jjtc003 = false;
                                                                                                                                                                                                         } else {
                                                                                                                                                                                                           jjtree.popNode();
                                                                                                                                                                                                         }
                                                                                                                                                                                                         if (jjte003 instanceof RuntimeException) {
                                                                                                                                                                                                           {if (true) throw (RuntimeException)jjte003;}
                                                                                                                                                                                                         }
                                                                                                                                                                                                         if (jjte003 instanceof ParseException) {
                                                                                                                                                                                                           {if (true) throw (ParseException)jjte003;}
                                                                                                                                                                                                         }
                                                                                                                                                                                                         {if (true) throw (Error)jjte003;}
          } finally {
                                                                                                                                                                                                         if (jjtc003) {
                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn003,  2);
                                                                                                                                                                                                           jjtn003.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                         }
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    case ANSWER:
      Answer();
      break;
    case LPAR:
      jj_consume_token(LPAR);
      Expression();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumberLiteral() throws ParseException {
 /*@bgen(jjtree) NumberLiteral */
   ASTNumberLiteral jjtn000 = new ASTNumberLiteral(JJTNUMBERLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(NUMBER_EXPRESSION);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                 jjtn000.val = Double.parseDouble(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void LogicLiteral() throws ParseException {
                      /*@bgen(jjtree) LogicLiteral */
  ASTLogicLiteral jjtn000 = new ASTLogicLiteral(JJTLOGICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.val = true;
        break;
      case FALSE:
        jj_consume_token(FALSE);
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                                jjtn000.val = false;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void TextLiteral() throws ParseException {
 /*@bgen(jjtree) TextLiteral */
        ASTTextLiteral jjtn000 = new ASTTextLiteral(JJTTEXTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(TEXT_EXPRESSION);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
                               jjtn000.val = new String(t.image.substring(1, t.image.length() - 1));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ListLiteral() throws ParseException {
 /*@bgen(jjtree) ListLiteral */
  ASTListLiteral jjtn000 = new ASTListLiteral(JJTLISTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRAC);
      Expression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      jj_consume_token(RBRAC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Id() throws ParseException {
 /*@bgen(jjtree) Id */
        ASTId jjtn000 = new ASTId(JJTID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                          jjtn000.name = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Answer() throws ParseException {
                /*@bgen(jjtree) Answer */
  ASTAnswer jjtn000 = new ASTAnswer(JJTANSWER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ANSWER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/* STATEMENTS */
  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));jjtn000.elseIfCount = 0;
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      LogicExpression();
      jj_consume_token(RPAR);
      Block();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        jj_consume_token(ELSEIF);
        jj_consume_token(LPAR);
        LogicExpression();
        jj_consume_token(RPAR);
        Block();
             jjtn000.elseIfCount++;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Block();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void LoopStatement() throws ParseException {
                      /*@bgen(jjtree) LoopStatement */
  ASTLoopStatement jjtn000 = new ASTLoopStatement(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LOOP);
      jj_consume_token(LPAR);
      MathExpression();
      jj_consume_token(RPAR);
      Block();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void RepeatUntilStatement() throws ParseException {
                              /*@bgen(jjtree) RepeatUntilStatement */
  ASTRepeatUntilStatement jjtn000 = new ASTRepeatUntilStatement(JJTREPEATUNTILSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(REPEATUNTIL);
      jj_consume_token(LPAR);
      LogicExpression();
      jj_consume_token(RPAR);
      Block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ForeverStatement() throws ParseException {
                         /*@bgen(jjtree) ForeverStatement */
  ASTForeverStatement jjtn000 = new ASTForeverStatement(JJTFOREVERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FOREVER);
      Block();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void WaitStatement() throws ParseException {
                      /*@bgen(jjtree) WaitStatement */
  ASTWaitStatement jjtn000 = new ASTWaitStatement(JJTWAITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WAIT);
      jj_consume_token(LPAR);
      MathExpression();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void WaitUntilStatement() throws ParseException {
                           /*@bgen(jjtree) WaitUntilStatement */
  ASTWaitUntilStatement jjtn000 = new ASTWaitUntilStatement(JJTWAITUNTILSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WAIT);
      jj_consume_token(LPAR);
      LogicExpression();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void AnnounceStatement() throws ParseException {
                           /*@bgen(jjtree) AnnounceStatement */
  ASTAnnounceStatement jjtn000 = new ASTAnnounceStatement(JJTANNOUNCESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ANNOUNCE);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void AskStatement() throws ParseException {
                      /*@bgen(jjtree) AskStatement */
  ASTAskStatement jjtn000 = new ASTAskStatement(JJTASKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ASK);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ListAddStatement() throws ParseException {
                          /*@bgen(jjtree) ListAddStatement */
  ASTListAddStatement jjtn000 = new ASTListAddStatement(JJTLISTADDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Id();
      jj_consume_token(ADD);
      Expression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ListRemoveStatement() throws ParseException {
                             /*@bgen(jjtree) ListRemoveStatement */
  ASTListRemoveStatement jjtn000 = new ASTListRemoveStatement(JJTLISTREMOVESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Id();
      jj_consume_token(REMOVE);
      Expression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void VariableDeclareStatement() throws ParseException {
 /*@bgen(jjtree) VariableDeclareStatement */
        ASTVariableDeclareStatement jjtn000 = new ASTVariableDeclareStatement(JJTVARIABLEDECLARESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        jj_consume_token(NUMBER);
                            jjtn000.type = ParfAConstants.NUMBER;
        break;
      case LOGIC:
        jj_consume_token(LOGIC);
                                                                              jjtn000.type = ParfAConstants.LOGIC;
        break;
      case TEXT:
        jj_consume_token(TEXT);
                                                                                                                              jjtn000.type = ParfAConstants.TEXT;
        break;
      case LIST:
        jj_consume_token(LIST);
                                                                                                                                                                             jjtn000.type = ParfAConstants.LIST;
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                       jjtc000 = false;
                                                                                                                                                                                                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                                      jjtn000.name = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void VariableAssignStatement() throws ParseException {
                                 /*@bgen(jjtree) VariableAssignStatement */
  ASTVariableAssignStatement jjtn000 = new ASTVariableAssignStatement(JJTVARIABLEASSIGNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Id();
      jj_consume_token(ASSIGN);
      Expression();
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
    }
  }

  final public void VariableDeclareAssignStatement() throws ParseException {
 /*@bgen(jjtree) VariableDeclareAssignStatement */
        ASTVariableDeclareAssignStatement jjtn000 = new ASTVariableDeclareAssignStatement(JJTVARIABLEDECLAREASSIGNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        jj_consume_token(NUMBER);
                             jjtn000.type = ParfAConstants.NUMBER;
        break;
      case LOGIC:
        jj_consume_token(LOGIC);
                                                                               jjtn000.type = ParfAConstants.LOGIC;
        break;
      case TEXT:
        jj_consume_token(TEXT);
                                                                                                                               jjtn000.type = ParfAConstants.TEXT;
        break;
      case LIST:
        jj_consume_token(LIST);
                                                                                                                                                                              jjtn000.type = ParfAConstants.LIST;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                                                        jjtn000.name = t.image;
      jj_consume_token(ASSIGN);
      Expression();
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
    }
  }

  final public void Block() throws ParseException {
               /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRAC);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case LOOP:
        case REPEATUNTIL:
        case FOREVER:
        case WAIT:
        case ANNOUNCE:
        case ASK:
        case CREATE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        Statement();
      }
      jj_consume_token(RBRAC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Statement() throws ParseException {
    if (jj_2_4(2147483647)) {
      VariableDeclareAssignStatement();
    } else if (jj_2_5(2)) {
      VariableAssignStatement();
    } else if (jj_2_6(3)) {
      VariableDeclareStatement();
    } else if (jj_2_7(2)) {
      ListAddStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ListRemoveStatement();
        break;
      case IF:
        IfStatement();
        break;
      case LOOP:
        LoopStatement();
        break;
      case REPEATUNTIL:
        RepeatUntilStatement();
        break;
      case FOREVER:
        ForeverStatement();
        break;
      default:
        jj_la1[23] = jj_gen;
        if (jj_2_8(3)) {
          WaitStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WAIT:
            WaitUntilStatement();
            break;
          default:
            jj_la1[24] = jj_gen;
            if (jj_2_9(2)) {
              AnnounceStatement();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ASK:
                AskStatement();
                break;
              default:
                jj_la1[25] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_69() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(NOTEQUAL)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(LENGTHOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(ANSWER)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(LBRAC)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRAC)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(TEXT_EXPRESSION)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(NUMBER_EXPRESSION)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(LOGIC)) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(NUMBEROF)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(LOGIC)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(GREATERTHANOREQUALTO)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(CONTAINS)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(MODULUS)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ANNOUNCE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(LESSTHANOREQUALTO)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(WAIT)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParfATokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2de400,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x14100000,0x10000000,0x10000000,0x0,0x0,0x14100000,0x0,0x40000000,0x800,0x1000,0x40000000,0x40000000,0x3c00000,0x3c00000,0x2de400,0xe400,0x10000,0x80000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800000,0x30,0x3c0,0x3c0,0x1,0x1,0xe,0xe,0xf89000,0xc00000,0x800000,0x6000,0x6000,0xf88000,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParfA(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParfA(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParfATokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParfA(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParfATokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParfA(ParfATokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParfATokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        /*	* Exports ParfA code into a binary file	* @param filename the full name of the text file	* @param exportFilename the destination of the binary file	* throws IOException if there is an I/O error		public static void export(String filename, String exportFilename) throws IOException	{	  	Manifest manifest = new Manifest();  		manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");	  	FileOutputStream fout = new FileOutputStream(filename);    	JarOutputStream jout = new JarOutputStream(fout, manifest);		Collection<File> files = FileUtils.listFiles(new File("bin"), null, true);		for(File f : files)		{			jout.putNextEntry(new ZipEntry(f.getName()));			jout.write(Files.readAllBytes(f.toPath()));			jout.closeEntry();		}		jout.close();		fout.close();	}	TODO	*/
}
