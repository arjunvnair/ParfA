/* Generated By:JJTree&JavaCC: Do not edit this line. ParfATokenManager.java */
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.charset.StandardCharsets;
import java.util.jar.JarOutputStream;
import java.util.jar.Manifest;
import java.util.jar.Attributes;
import java.util.Collection;
import java.util.zip.ZipEntry;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import consoleio.C;
import org.apache.commons.io.FileUtils;

/** Token Manager. */
public class ParfATokenManager implements ParfAConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000001c0000L) != 0L)
         {
            jjmatchedKind = 55;
            return 23;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 55;
            return 80;
         }
         if ((active0 & 0x3440000123c400L) != 0L)
         {
            jjmatchedKind = 55;
            return 49;
         }
         if ((active0 & 0x2802000L) != 0L)
         {
            jjmatchedKind = 55;
            return 72;
         }
         if ((active0 & 0x1800L) != 0L)
         {
            jjmatchedKind = 55;
            return 4;
         }
         if ((active0 & 0x100000400000000L) != 0L)
            return 50;
         return -1;
      case 1:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
            return 86;
         }
         if ((active0 & 0x36400003abf800L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
            return 49;
         }
         if ((active0 & 0x140000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
            return 22;
         }
         if ((active0 & 0x400L) != 0L)
            return 49;
         return -1;
      case 2:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
            return 85;
         }
         if ((active0 & 0x2000000080000L) != 0L)
            return 49;
         if ((active0 & 0x34400003b7f800L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
            return 49;
         }
         return -1;
      case 3:
         if ((active0 & 0x24400000b4c000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 55;
               jjmatchedPos = 3;
            }
            return 49;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 55;
               jjmatchedPos = 3;
            }
            return 84;
         }
         if ((active0 & 0x10000003033800L) != 0L)
            return 49;
         return -1;
      case 4:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
            return 83;
         }
         if ((active0 & 0x440000036c000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
            return 49;
         }
         if ((active0 & 0x20000000800000L) != 0L)
            return 49;
         return -1;
      case 5:
         if ((active0 & 0x4000000300000L) != 0L)
            return 49;
         if ((active0 & 0x400000L) != 0L)
            return 82;
         if ((active0 & 0x40000006c000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
            return 49;
         }
         return -1;
      case 6:
         if ((active0 & 0x400000064000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
            return 49;
         }
         if ((active0 & 0x8000L) != 0L)
            return 49;
         return -1;
      case 7:
         if ((active0 & 0x24000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 7;
            return 49;
         }
         if ((active0 & 0x400000040000L) != 0L)
            return 49;
         return -1;
      case 8:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 8;
            return 49;
         }
         if ((active0 & 0x20000L) != 0L)
            return 49;
         return -1;
      case 9:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
            return 49;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 35);
      case 40:
         return jjStopAtPos(0, 26);
      case 41:
         return jjStopAtPos(0, 27);
      case 42:
         return jjStopAtPos(0, 33);
      case 43:
         return jjStopAtPos(0, 31);
      case 44:
         return jjStopAtPos(0, 30);
      case 45:
         return jjStopAtPos(0, 32);
      case 47:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 60:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 62:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000001c0000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000200000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1800L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000000008000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2802000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000004000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000001000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x30000L);
      case 123:
         return jjStopAtPos(0, 28);
      case 125:
         return jjStopAtPos(0, 29);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 61:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000030000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000001004000L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 49);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000080a000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000200000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 49);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
      case 107:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 49);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000400000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000040000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2101800L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0xc800L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000040000L);
      case 112:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 49);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 49);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 49);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000020000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000004000L);
      case 99:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 49);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 49);
         return jjMoveStringLiteralDfa5_0(active0, 0x500000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000008000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000800L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 49);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 82);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 49);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 49);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 49);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 14, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddTwoStates(58, 62);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(46, 47);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(42, 44);
                  else if (curChar == 61)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 6:
                  if (curChar == 61 && kind > 36)
                     kind = 36;
                  break;
               case 7:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 20:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 21:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 25:
               case 26:
                  if (curChar == 38 && kind > 42)
                     kind = 42;
                  break;
               case 27:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 33:
                  if (curChar == 33 && kind > 44)
                     kind = 44;
                  break;
               case 34:
                  if (curChar == 35 && kind > 45)
                     kind = 45;
                  break;
               case 40:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 41:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(42, 44);
                  break;
               case 42:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 45:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 46:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 50:
                  if (curChar != 47)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddStates(5, 7);
                  break;
               case 51:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddStates(5, 7);
                  break;
               case 52:
                  if ((0x2400L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 53:
                  if (curChar == 10 && kind > 57)
                     kind = 57;
                  break;
               case 54:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 56:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 4);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(59, 44);
                  break;
               case 59:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 46 && kind > 51)
                     kind = 51;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(58, 62);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 100)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 86;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 31;
                  if (curChar == 110)
                     jjAddStates(8, 9);
                  else if (curChar == 108)
                     jjAddStates(10, 11);
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 124)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 0:
                  if (curChar == 115 && kind > 36)
                     kind = 36;
                  break;
               case 1:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 8:
                  if (curChar == 108 && kind > 37)
                     kind = 37;
                  break;
               case 9:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 24:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 28:
                  if (curChar == 114 && kind > 43)
                     kind = 43;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
               case 31:
                  if (curChar == 124 && kind > 43)
                     kind = 43;
                  break;
               case 32:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 35:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 36:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 46:
                  jjAddStates(12, 13);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(49);
                  break;
               case 51:
                  if (kind > 57)
                     kind = 57;
                  jjAddStates(5, 7);
                  break;
               case 65:
                  if (curChar == 108)
                     jjAddStates(10, 11);
                  break;
               case 66:
                  if (curChar == 102 && kind > 47)
                     kind = 47;
                  break;
               case 67:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 73:
                  if (curChar == 104 && kind > 47)
                     kind = 47;
                  break;
               case 74:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 110)
                     jjAddStates(8, 9);
                  break;
               case 79:
                  if (curChar == 116 && kind > 44)
                     kind = 44;
                  break;
               case 81:
                  if (curChar == 102 && kind > 45)
                     kind = 45;
                  break;
               case 87:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 51:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x400000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   57, 58, 61, 62, 63, 51, 52, 54, 80, 87, 72, 77, 46, 47, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\151\146", 
"\145\154\163\145\40\151\146", "\145\154\163\145", "\154\157\157\160", 
"\162\145\160\145\141\164\125\156\164\151\154", "\146\157\162\145\166\145\162", "\167\141\151\164", 
"\167\141\151\164\125\156\164\151\154", "\141\156\156\157\165\156\143\145", "\141\163\153", 
"\141\156\163\167\145\162", "\143\162\145\141\164\145", "\156\165\155\142\145\162", 
"\154\157\147\151\143", "\164\145\170\164", "\154\151\163\164", "\50", "\51", "\173", "\175", "\54", 
"\53", "\55", "\52", "\57", "\45", null, null, "\76", "\74", "\76\75", "\74\75", null, 
null, null, null, "\143\157\156\164\141\151\156\163", null, null, "\141\144\144", 
"\162\145\155\157\166\145", null, "\164\162\165\145", "\146\141\154\163\145", null, null, null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "START_LONG_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffc01L, 
};
static final long[] jjtoSkip = {
   0x60000000000003eL, 
};
static final long[] jjtoSpecial = {
   0x600000000000000L, 
};
static final long[] jjtoMore = {
   0x900000000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[88];
private final int[] jjstateSet = new int[176];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParfATokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParfATokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 59 && (0x800000100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 59)
         {
            jjmatchedKind = 59;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
